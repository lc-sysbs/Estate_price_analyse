# -*- coding: utf-8 -*-
"""
Created on Fri Nov 29 22:48:05 2019
@author: LinChao
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm 
import datetime

# 导入数据
path = 'C://Users//Administrator//Desktop//房价分析//'
f = open(path+'股票数据.csv')
data0 = pd.read_csv(f)
f1 = open(path+'房价指数同比增长.csv')
data1 = pd.read_csv(f1)
data1 = data1.sort_values(by=['城市']).reset_index(drop=True) # 按列排序并重置index
f2 = open(path+'房地产百城数据.csv')
data2 = pd.read_csv(f2)

# 数据处理及分类
data = data0.dropna(axis=0)  # 删去缺失行
#data = data[~data['行业'].isin(['非银金融','银行'])] # 删去金融行业股票 
list_city = list(set(data['城市'])) # 获取城市名
data_list = []
for i in range(len(list_city)):
    data_list.append(data[data['城市']==list_city[i]]) # 按条件筛选行

# 定义财务指标计算函数
def cal_ROE(data):   
    ev = data['总市值']
    roe = ((data['ROE'].mul(ev)/ev.sum()).sum())  # 计算加权财务指标
    equity = ((data['权益乘数'].mul(ev))/ev.sum()).sum()
    turnover = ((data['总资产周转率'].mul(ev))/ev.sum()).sum()
    m = pd.to_numeric(data['净利润率']) # 字符串转数值
    margin = ((m.mul(ev))/ev.sum()).sum()
    roe1 = ((data['ROE1'].mul(ev)/ev.sum()).sum())
    equity1 = ((data['权益乘数1'].mul(ev))/ev.sum()).sum()
    turnover1 = ((data['总资产周转率1'].mul(ev))/ev.sum()).sum()
    margin1 = ((data['净利润率1'].mul(ev))/ev.sum()).sum()
    asset_g = ((data['总资产同比增长率'].mul(ev))/ev.sum()).sum()
    net_asset_g = ((data['净资产同比增长率'].mul(ev))/ev.sum()).sum()
    revenue_g = ((data['营业总收入同比增长率'].mul(ev))/ev.sum()).sum()
    net_profit_g = ((data['净利润同比增长率'].mul(ev))/ev.sum()).sum()
    return [roe1,equity1,turnover1,margin1,roe1/roe-1,equity1/equity-1,
            turnover1/turnover-1,margin1/margin-1,asset_g,net_asset_g,
            revenue_g,net_profit_g]

#计算各城市指标存入roe变量
roe_list = []
for i in range(len(data_list)):
    roe_list.append(cal_ROE(data_list[i]))
roe = pd.DataFrame(roe_list,index = list_city,
                   columns=['roe','equity','turnover','margin',
                            'roe_g','equity_g','turnover_g','margin_g',
                            'asset_g','net_asset_g','revenue_g','net_profit_g'])
roe = roe.reset_index()
roe = roe.sort_values(by=['index']).reset_index(drop=True)

# 选择x,y数据
columns = 'roe'  
x = roe[columns]          # 选择股票数据作为自变量
y = data1['指数增长']     # 选择指数增长作为因变量  住宅均价

# 删去异常值点
#x=x.drop([15,40]).reset_index(drop=True)
#y=y.drop([15,40]).reset_index(drop=True)

# 绘制散点图
city = roe['index']
plt.rcParams['font.sans-serif'] = ['SimHei'] # 图中显示中文
plt.rcParams['axes.unicode_minus'] = False   # 正常显示负号
fig,ax=plt.subplots()
ax.set(xlabel=columns, ylabel='房价指数同比增长') 
ax.scatter(x,y)
for i in range(len(x)):
    ax.annotate(city[i],(x[i],y[i]))

# 计量分析，并绘制拟合图
X=sm.add_constant(x)  # 模型增加常数项
est = sm.OLS(y,X)
est = est.fit()  # 拟合
est.summary()  # 输出各拟合结果
para = est.params  # 模型系数
y_hat=est.predict(X) # 计算预测值
plt.scatter(x, y)
plt.xlabel(columns)
plt.ylabel('房价指数同比增长')
plt.plot(x, y_hat)
plt.annotate(r'y='+str(round(para[0],4))+'+'+str(round(para[1],2))+'x', #\n  R2=0.092
             xy=(x.max()*0.7,y.mean()))

# 计算相关系数热力图，并将数据存入csv文件
xy = pd.concat([roe,y],axis=1)
fig=plt.figure(figsize=(10,6))
relations= xy.corr()
sns.heatmap(relations,annot=True,linewidths=0.05,linecolor='white',annot_kws={'size':8,'weight':'bold'})

xy.to_csv('C://Users//Administrator//Desktop//房价分析//输出数据.csv') 

# 绘制百城数据折线图
x = list(data2['时间'])
for i in range(len(x)):
    x[i] = datetime.datetime.strptime(x[i],'%Y-%m')
y1 = data2['百城住宅均价']
y2 = data2['百城住宅价格指数同比']
plt.plot(x, y1)
plt.xlabel('时间')
plt.ylabel('百城住宅均价')
